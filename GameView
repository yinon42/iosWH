import SwiftUI

struct GameView: View {
    @AppStorage("userName") var userName: String = "Player"
    @AppStorage("userSide") var userSide: String = "West" // "East" או "West"

    @Environment(\.dismiss) var dismiss

    @State private var playerScore = 0
    @State private var pcScore = 0
    @State private var currentRound = -1

    @State private var playerCardName = "back"
    @State private var pcCardName = "back"
    @State private var playerCardValue = 0
    @State private var pcCardValue = 0

    @State private var timerValue = 5
    @State private var isFirstRound = true
    @State private var countdownTimer: Timer?
    @State private var highlightWinner: String? = nil
    @State private var showVictoryScreen = false

    let cardValues = Array(2...14)
    let maxRounds = 10

    var body: some View {
        ZStack {
            VStack {
                // כותרת ניקוד
                HStack {
                    if userSide == "West" {
                        playerColumn(name: userName, score: playerScore, highlight: highlightWinner == "player")
                        Spacer()
                        playerColumn(name: "PC", score: pcScore, highlight: highlightWinner == "pc")
                    } else {
                        playerColumn(name: "PC", score: pcScore, highlight: highlightWinner == "pc")
                        Spacer()
                        playerColumn(name: userName, score: playerScore, highlight: highlightWinner == "player")
                    }
                }
                .padding(.horizontal, 30)
                .padding(.top)

                Spacer()

                // קלפים
                HStack {
                    if userSide == "West" {
                        cardView(cardName: playerCardName)
                        Spacer()
                        cardView(cardName: pcCardName)
                    } else {
                        cardView(cardName: pcCardName)
                        Spacer()
                        cardView(cardName: playerCardName)
                    }
                }
                .padding(.horizontal, 40)

                Spacer()

                // טיימר וסיבוב
                VStack(spacing: 8) {
                    Image(systemName: "timer")
                    Text("\(timerValue)")
                        .font(.title)

                    if currentRound >= 0 {
                        Text("ROUND \(min(currentRound + 1, maxRounds))/\(maxRounds)")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                    }
                }

                Spacer()
            }
            .padding()
        }
        .onAppear {
            startCountdown()
        }
        .fullScreenCover(isPresented: $showVictoryScreen) {
            VictoryView(
                winnerName: getWinnerName(),
                winnerScore: max(playerScore, pcScore),
                onPlayAgain: { resetGame() },
                onBackToMenu: { dismiss() }
            )
        }
    }

    // הצגת שחקן עם ניקוד
    func playerColumn(name: String, score: Int, highlight: Bool) -> some View {
        VStack {
            Text(name)
            Text("\(score)")
                .font(.title)
                .bold()
                .scaleEffect(highlight ? 1.3 : 1.0)
                .animation(.easeInOut, value: highlight)
        }
    }

    // תצוגת קלף
    func cardView(cardName: String) -> some View {
        ZStack {
            RoundedRectangle(cornerRadius: 12)
                .fill(Color(.systemBackground))
                .shadow(radius: 4)

            Image(cardName)
                .resizable()
                .scaledToFit()
                .frame(width: 100, height: 150)
        }
        .frame(width: 120, height: 180)
    }

    // טיימר סופר לאחור
    func startCountdown() {
        timerValue = isFirstRound ? 5 : 3
        countdownTimer?.invalidate()

        countdownTimer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { timer in
            if timerValue > 0 {
                timerValue -= 1
            } else {
                timer.invalidate()
                showNextRound()
            }
        }
    }

    // הפעלת סיבוב חדש
    func showNextRound() {
        if (currentRound + 1) >= maxRounds {
            endGame()
            return
        }

        let playerValue = cardValues.randomElement() ?? 2
        let pcValue = cardValues.randomElement() ?? 2

        playerCardValue = playerValue
        pcCardValue = pcValue

        playerCardName = "card\(playerValue)"
        pcCardName = "card\(pcValue)"
        highlightWinner = nil

        currentRound += 1
        isFirstRound = false
        startCountdown()

        // השהיה ואז עדכון ניקוד
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            withAnimation(.easeIn(duration: 0.4)) {
                if playerValue > pcValue {
                    playerScore += 1
                    highlightWinner = "player"
                } else if pcValue > playerValue {
                    pcScore += 1
                    highlightWinner = "pc"
                }
            }
        }
    }

    // סיום משחק
    func endGame() {
        countdownTimer?.invalidate()
        showVictoryScreen = true
    }

    // איפוס
    func resetGame() {
        playerScore = 0
        pcScore = 0
        currentRound = -1
        isFirstRound = true
        playerCardName = "back"
        pcCardName = "back"
        highlightWinner = nil
        showVictoryScreen = false
        startCountdown()
    }

    // קביעת מנצח
    func getWinnerName() -> String {
        if playerScore > pcScore {
            return userName
        } else if pcScore > playerScore {
            return "PC"
        } else {
            return "Tie"
        }
    }
}
