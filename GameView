import SwiftUI

struct GameView: View {
    @AppStorage("userName") var userName: String = "Player"

    @State private var playerScore = 0
    @State private var pcScore = 0
    @State private var currentRound = 0

    @State private var playerCardName = "back"
    @State private var pcCardName = "back"
    @State private var playerCardValue = 0
    @State private var pcCardValue = 0

    @State private var timerValue = 5
    @State private var isFirstRound = true
    @State private var countdownTimer: Timer?
    @State private var gameEnded = false
    @State private var winnerText = ""
    @State private var highlightWinner: String? = nil

    let cardValues = Array(2...14)
    let maxRounds = 10

    var body: some View {
        ZStack {
            // רקע ברירת מחדל (לבן/שחור לפי מצב המערכת)
            VStack {
                // ניקוד עם הדגשה
                HStack {
                    VStack {
                        Text(userName)
                        Text("\(playerScore)")
                            .font(.title)
                            .bold()
                            .scaleEffect(highlightWinner == "player" ? 1.3 : 1.0)
                            .animation(.easeInOut, value: highlightWinner)
                    }
                    Spacer()
                    VStack {
                        Text("PC")
                        Text("\(pcScore)")
                            .font(.title)
                            .bold()
                            .scaleEffect(highlightWinner == "pc" ? 1.3 : 1.0)
                            .animation(.easeInOut, value: highlightWinner)
                    }
                }
                .padding(.horizontal, 30)
                .padding(.top)

                Spacer()

                // קלפים עם רקע/ריחוף
                HStack {
                    cardView(cardName: playerCardName)
                    Spacer()
                    cardView(cardName: pcCardName)
                }
                .padding(.horizontal, 40)

                Spacer()

                // טיימר + סיבוב נוכחי
                VStack(spacing: 8) {
                    Image(systemName: "timer")
                    Text("\(timerValue)")
                        .font(.title)
                    Text("ROUND \(min(currentRound + 1, maxRounds))/\(maxRounds)")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }

                Spacer()
            }
            .padding()
        }
        .onAppear {
            startCountdown()
        }
        .alert(isPresented: $gameEnded) {
            Alert(
                title: Text("Game Over"),
                message: Text(winnerText),
                dismissButton: .default(Text("Back"))
            )
        }
    }

    func cardView(cardName: String) -> some View {
        ZStack {
            RoundedRectangle(cornerRadius: 12)
                .fill(Color(.systemBackground))
                .shadow(radius: 4)

            Image(cardName)
                .resizable()
                .scaledToFit()
                .frame(width: 100, height: 150)
        }
        .frame(width: 120, height: 180)
    }

    func startCountdown() {
        timerValue = isFirstRound ? 5 : 3
        countdownTimer?.invalidate()

        countdownTimer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { timer in
            if timerValue > 0 {
                timerValue -= 1
            } else {
                timer.invalidate()
                showNextRound()
            }
        }
    }

    func showNextRound() {
        guard currentRound < maxRounds else {
            endGame()
            return
        }

        // שליפת קלפים רנדומליים
        let playerValue = cardValues.randomElement() ?? 2
        let pcValue = cardValues.randomElement() ?? 2

        playerCardValue = playerValue
        pcCardValue = pcValue

        playerCardName = "card\(playerValue)"
        pcCardName = "card\(pcValue)"

        highlightWinner = nil

        // העברת סיבוב והתחלת טיימר חדש מיד
        currentRound += 1
        isFirstRound = false
        startCountdown()

        // עיכוב של שנייה ואז עידכון ניקוד עם אנימציה
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            withAnimation(.easeIn(duration: 0.4)) {
                if playerValue > pcValue {
                    playerScore += 1
                    highlightWinner = "player"
                } else if pcValue > playerValue {
                    pcScore += 1
                    highlightWinner = "pc"
                }
            }
        }
    }

    func endGame() {
        gameEnded = true
        countdownTimer?.invalidate()

        if playerScore > pcScore {
            winnerText = "\(userName) wins! 🎉"
        } else if pcScore > playerScore {
            winnerText = "PC wins! 🤖"
        } else {
            winnerText = "It's a tie!"
        }
    }
}
